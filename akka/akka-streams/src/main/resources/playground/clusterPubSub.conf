akka {
        loglevel = "INFO"
                actor {
        provider = cluster
                warn-about-java-serializer-usage = false
}

        remote {
        log-remote-lifecycle-events = off
                artery {
        enabled = on
                transport = aeron-udp
                canonical.hostname = "localhost"
}
}

        cluster {
        seed-nodes = [
                "akka://DavisCluster@localhost:2551",
                "akka://DavisCluster@localhost:2552",
                "akka://DavisCluster@localhost:2555"]
}
}

        masterWithRouterApp {
        akka {
        actor.deployment {
        /master/clusterAwareRouter {
        router = round-robin-pool
                cluster {
        enabled = on
                max-nr-of-instances-per-node = 3
                allow-local-routees = on
}
}
}

        remote.artery.canonical.port = 2555
}
}

        masterWithGroupRouterApp {
        akka {
        actor.deployment {
        /master/clusterAwareRouter {
        router = round-robin-group
                routees.paths = ["/user/worker"]
        cluster {
        enabled = on
                allow-local-routees = off
}
}
}

        remote.artery.canonical.port = 2555
}
}

akka.cluster.pub-sub {
            # Actor name of the mediator actor, /system/distributedPubSubMediator
        name = distributedPubSubMediator

                # Start the mediator on members tagged with this role.
                # All members are used if undefined or empty.
        role = ""

                # The routing logic to use for 'Send'
                # Possible values: random, round-robin, broadcast
        routing-logic = random

                # How often the DistributedPubSubMediator should send out gossip information
        gossip-interval = 1s

                            # Removed entries are pruned after this duration
        removed-time-to-live = 120s

                            # Maximum number of elements to transfer in one message when synchronizing the registries.
                            # Next chunk will be transferred in next round of gossip.
        max-delta-elements = 3000

                            # When a message is published to a topic with no subscribers send it to the dead letters.
        send-to-dead-letters-when-no-subscribers = on

                                                       # The id of the dispatcher to use for DistributedPubSubMediator actors.
                                                       # If not specified default dispatcher is used.
                                                       # If specified you need to define the settings of the actual dispatcher.
        use-dispatcher = ""
}